Report for Lab 3
----------------

After you complete lab 5, please answer the following questions.

1. What is your name?  If you work with a partner, be sure to write both of your names.

Michael Dunnegan

2. What did you think of this assignment?

	It was ok. It took a long time to write and debug.

3. What was the hardest part of this assignment?

	There were a lot of cases where I could get tests to pass, but I wrote incorrect code. Making changes to debug things was
	often frustrating because they could cause 1 test to pass, and another to fail, in different files. 

4. Describe any missing or incomplete elements of your code.

	TransactionTest system test is failing. 

5. Roughly how long did you spend working on this lab?

	~40 hours

6. Describe your lock manager implementation.  Here are some specific questions to answer:

a) Where is your lock manager located?  (I.e., is it a separate class, part of BufferPool, etc.)

	It's in a separate class in a separate file

b) What specific information do you store and how do you store it?  

	I store two hashmaps. I have a 'locked transactions' map, and a 'waiting transactions' map. The locked transactions map
	has a LockEntry (separate class) for each page. It stores an array of transactions that have the lock. 

c) Briefly describe what happens when a new transaction requests a page.  I.e., walk thru how the lock manager decides whether or not to grant the request.  Your description should reference the data structures that describe in part (b).

	If the page lock isn't available, it first adds itself to the waiting queue. Next, it checks the availability of the 
	locks. A write lock is available if nobody has the lock, of if a read-only version of the requesting transaction is the only one locking.
	Otherwise we just wait. A read lock is available if nobody has an exclusive lock. 
	

d) Briefly explain how you manage locks when inserting a tuple into a HeapFile.  In particular, how do you acquire/release locks when looking for a page to insert.

	HeapFile.insert calls BufferPool.getPage. It acquires a readwrite lock before doing an insert. 
