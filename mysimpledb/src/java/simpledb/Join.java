package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    JoinPredicate jp;
    DbIterator child1;
    DbIterator child2;
    boolean open = false;
    Tuple t1 = null;
    Tuple t2 = null;
    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.jp = p;
        this.child1 = child1;
        this.child2 = child2;
        this.open = false;
    }

    public JoinPredicate getJoinPredicate() {
        return jp;
    }

    /**
     * @return the field name of join field1. Should not be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
    	return child1.getTupleDesc().getFieldName(jp.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
    	return child1.getTupleDesc().getFieldName(jp.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     * TupleDesc of joined tables
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	TupleDesc td1 = child1.getTupleDesc();
    	TupleDesc td2 = child2.getTupleDesc();
    	
    	Type[] types = new Type[td1.numFields()+td2.numFields()];
        String[] names = new String[td1.numFields()+td2.numFields()];
        
        for(int i=0;i<td1.numFields();i++) {
        	types[i] = td1.getFieldType(i);
        	names[i] = td1.getFieldName(i);
        }
        for(int i=0;i<td2.numFields();i++) {
        	types[i+td1.numFields()] = td2.getFieldType(i);
        	names[i+td1.numFields()] = td2.getFieldName(i);
        }
        
    	return new TupleDesc(types, names);
    }

    public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        this.open = true;
    }

    public void close() {
    	super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	
        while(true){
        	
        	if (t1 == null){
        		if (child1.hasNext()){
        			t1 = child1.next();
        		}
        	}
        	
        	if (!child2.hasNext()){
        		if(child1.hasNext()){
        			t1 = child1.next();
        			child2.rewind();
        		} else {
        			return null;			
        		}
        	}
        	  	
        	while(child2.hasNext()){
        		t2 = child2.next();
        		if(jp.filter(t1, t2)){

        			Tuple joinTuple = new Tuple(getTupleDesc());
        			
        			for(int i = 0; i < t1.getTupleDesc().numFields(); i++){
        	    		joinTuple.setField(i, t1.getField(i));
        	    	}
        	    	for(int i = 0; i < t2.getTupleDesc().numFields(); i++){
        	    		joinTuple.setField(i+t1.getTupleDesc().numFields(), t2.getField(i));
        	    	}
    	        	return joinTuple;
        		}
        	}        	
        }
    }

    @Override
    public DbIterator[] getChildren() {
        DbIterator[] bothChildren = {child1, child2};
        return bothChildren;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
